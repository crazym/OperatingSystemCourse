A3 Design Document

Open File Table & Fork:

- struct filetable: contains a list of struct of file_handles and it has a fixed length __OPEN_MAX.

- file_handle: 

	- struct vnode *fvnode: abstract representation of the file.  
	- off_t cur_po: current position of file.
	- int fflag: indicate the access mode of file.
	- int ref_count: represents the number of file descriptor pointing to this entry.
	- struct lock *flock: used for synchronization. It is used everytime there is change in cur_po and ref_count. 

- fork():
	file modified: thread_fork() in src/kern/thread/thread.c

	When a process forks, the child gets a shallow copy of the parent's file table.
	i.e. Entries in child's open file table points to the same file_handles as in parent.
	
	This way, both parent and child share the same file handles and thus the same current file position (cur_po).

	* If the child opens a file after the fork, that file exists only the the file table of the child. 

	* ref_count is set to 1 when the file is first opened by a process, and will be incremented by 1 when we fork(i.e. child and parent are both pointing to the same file handle).

	* If either process closes a file after the fork, the ref_count of the file is decremented by 1; the other process can still access the file. 
	
	* When the ref_count reaches 0, it means no process is referring to the file and we can then close it.


* sfs_getdirentry:

First we assert that the read/write mode of uio is set to UIO_READ.
Then we acquire lock...
We check the file type of the inode. If it is not SFS_TYPE_DIR, then we return ENOTDIR.
Next we get the total number of directory entries, via sfs_dir_nentries.
We consider uio_offset to be the slot that we wish to examine next. Hence we loop from slot uio_offset to the very last slot to read entries via sfs_readdir().
If the entry is not empty, then we copy its name(sfd_name) onto the uio, and update the uio_offset to the follow slot to examine in the future.
If the entry is empty, then we skip it and look in the next slot.
If there are no entries found, ie. we've searched through all entries, then we simply return. The syscall will know that nothing was written and return the correct value (length 0).


* Storing data in inode space:

First, in struct sfs_inode, we added a char array (sfi_inlinedata) of size 448 bytes (SFS_INLINED_BYTES) to store data.
448 bytes because we have 512-60=452 bytes of wasted space to make use of, and we want the useful space to be a multiple of struct sfs_dir, which is 64. 452 % 64 = 4, giving us now 4 bytes of waste space, and 448 bytes of usable space.

Since we now store the first 448 bytes of data in the inodes, we need to modify how we do io in sfs_io.
If the uio_offset is within the first 448 bytes, then we would need to read/write data to sfi_inlinedata.
And if we wrote any data there, we need to set the inode to dirty.

Subsequently, whenever uio_offset is used to determine block# or block alignment, we have to subtract uio_offset by SFS_INLINED_BYTES. Hence we have to modify lines in sfs_partialio(), sfs_blockio(), sfs_truncate(). 


* Biggest challenge:
Design of the open file table to work with fork() and be synchronized;
Try to get psh working;
lseek error checking (badcalls on invalid devices, etc);
